{"version":3,"sources":["draganddrop.jsx","App.js","reportWebVitals.js","index.js"],"names":["Drag","props","columnDefs","field","rowDrag","productColumnDefs","salesColumnDefs","defaultColDef","filter","flex","sortable","onGridReady","params","countryGridApi","api","tileContainer","document","getElementById","dropZone","getContainer","onDragStop","event","setState","selectedCountry","node","data","name","uniqueProducts","_","uniqBy","sales","row","map","product","addRowDropZone","onProductsGridReady","selectedProducts","nodes","salesListToDisplay","uniq","state","indexOf","sale","area","country","productType","year","channel","orderDate","orderId","shipDate","unitsSold","unitPrice","unitCost","totalRevenue","totalCost","totalProfit","className","style","width","height","this","rowData","countrys","rowDragManaged","animateRows","suppressMoveWhenRowDragging","type","id","value","enableMultiRowDragging","rowSelection","rows","columns","isEmpty","join","length","Component","App","onDragOver","e","preventDefault","onDrop","Array","from","dataTransfer","files","forEach","file","a","text","result","parse","shift","countryList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9af68efd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport _  from 'lodash';\r\nimport './draganddrop.css';\r\n\r\nclass Drag extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedCountry: \"\",\r\n            uniqueProducts: [],\r\n            selectedProducts : [],\r\n            salesListToDisplay: []\r\n        }\r\n    }\r\n\r\n    columnDefs= [\r\n    {\r\n        field: 'name',\r\n        rowDrag: true,\r\n    }];\r\n\r\n    productColumnDefs= [\r\n    {\r\n        field: 'product',\r\n        rowDrag: true,\r\n    }];\r\n\r\n    salesColumnDefs= [\r\n        {\r\n            field: 'area'\r\n        },\r\n        {\r\n            field: 'country'\r\n        },\r\n        {\r\n            field: 'productType'\r\n        },\r\n        {\r\n            field: 'year'\r\n        },\r\n        {\r\n            field: 'channel'\r\n        },\r\n        {\r\n            field: 'orderDate'\r\n        },\r\n        {\r\n            field: 'orderId'\r\n        },\r\n        {\r\n            field: 'shipDate'\r\n        },\r\n        {\r\n            field: 'unitsSold'\r\n        },\r\n        {\r\n            field: 'unitPrice'\r\n        },\r\n        {\r\n            field: 'unitCost'\r\n        },\r\n        {\r\n            field: 'totalRevenue'\r\n        },\r\n        {\r\n            field: 'totalCost'\r\n        },\r\n        {\r\n            field: 'totalProfit'\r\n        }\r\n    ];\r\n\r\n    defaultColDef= {\r\n        filter: true,\r\n        flex: 1,\r\n        sortable: true\r\n    };\r\n\r\n    onGridReady = (params)=> {\r\n        this.countryGridApi = params.api;\r\n        var tileContainer = document.getElementById(\"country-selection\");\r\n        var dropZone = {\r\n        getContainer: function () {\r\n            return tileContainer;\r\n        },\r\n        onDragStop:  (event) => {\r\n            this.setState({\r\n                selectedCountry: event.node.data.name\r\n            });\r\n            // once a country is selected, get list of all unique products available in that country\r\n            this.setState({\r\n                uniqueProducts: _.uniqBy(this.props.sales.filter(row => row[1]===event.node.data.name).map(row => {return {product: row[2]};} ), \"product\")\r\n            });\r\n        }\r\n        };\r\n        params.api.addRowDropZone(dropZone);\r\n    };\r\n\r\n    onProductsGridReady = (params)=> {\r\n        this.countryGridApi = params.api;\r\n        var tileContainer = document.getElementById(\"product-selection\");\r\n        var dropZone = {\r\n        getContainer: function () {\r\n            return tileContainer;\r\n        },\r\n        onDragStop:  (event) => {\r\n            this.setState({\r\n                selectedProducts: event.nodes.map(node => node.data.product)\r\n            }, () => {\r\n                // based on the selected country and list of products , filter the sales data and set them in state to display \r\n                this.setState({\r\n                    salesListToDisplay: _.uniq(this.props.sales.filter(row => row[1] === this.state.selectedCountry  && this.state.selectedProducts.indexOf(row[2]) !== -1))\r\n                    .map(sale => {\r\n                        return {\r\n                        area: sale[0],\r\n                        country: sale[1],\r\n                        productType: sale[2],\r\n                        year: sale[3],\r\n                        channel: sale[4],\r\n                        orderDate: sale[5],\r\n                        orderId: sale[6],\r\n                        shipDate: sale[7],\r\n                        unitsSold: sale[8],\r\n                        unitPrice: sale[9],\r\n                        unitCost: sale[10],\r\n                        totalRevenue: sale[11],\r\n                        totalCost: sale[12],\r\n                        totalProfit: sale[13]\r\n                    };\r\n                })\r\n                });\r\n            });\r\n        }\r\n        };\r\n        params.api.addRowDropZone(dropZone);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n                \r\n            <div>\r\n                <div className=\"countrys\">COUNTRIES</div>\r\n                <div className=\"container\">\r\n                <div style={{ width: '200px', height: '500px' }} className=\"ag-theme-alpine\">\r\n                    <AgGridReact className = \"country-table\"\r\n                    columnDefs={this.columnDefs}\r\n                    rowData={this.props.countrys}\r\n                    rowDragManaged={true}\r\n                    animateRows={true}\r\n                    onGridReady={this.onGridReady}\r\n                    suppressMoveWhenRowDragging={true}\r\n                    />\r\n                </div>\r\n                <br />\r\n                <div className=\"country-input\">\r\n                    Please select a Country  by dragging from the list:\r\n                    <input type=\"text\" id=\"country-selection\" value={this.state.selectedCountry}/>\r\n                </div>\r\n                \r\n                <br />\r\n                {\r\n                    this.state.selectedCountry &&\r\n                    (\r\n                        <>\r\n                            <div style={{ width: '200px', height: '500px' }} className=\"ag-theme-alpine\">\r\n                                <AgGridReact className=\"product-table\"\r\n                                columnDefs={this.productColumnDefs}\r\n                                rowData={this.state.uniqueProducts}\r\n                                rowDragManaged={true}\r\n                                animateRows={true}\r\n                                onGridReady={this.onProductsGridReady}\r\n                                enableMultiRowDragging={true}\r\n                                rowSelection={\"multiple\"}\r\n                                suppressMoveWhenRowDragging={true}\r\n                                />\r\n                            </div>\r\n                            <br/>\r\n\r\n                            <div className=\"product-input\">\r\n                            Please select a list of products by selecting and dragging from the list:\r\n                            <textarea id=\"product-selection\" rows=\"10\" columns=\"50\" value={_.isEmpty(this.state.selectedProducts)? \"\":this.state.selectedProducts.join(\"\\n\")}/>\r\n                            </div>\r\n                            \r\n                        </>\r\n                    )\r\n                }\r\n                </div>\r\n                <br/>\r\n                \r\n                {\r\n                    this.state.selectedProducts.length > 0 && \r\n                    (\r\n                        <>\r\n                        <div className=\"output\">OUTPUT :</div>\r\n                        <div style={{ width: '100%', height: '500px' }} className=\"ag-theme-alpine\">\r\n                            <AgGridReact\r\n                            columnDefs={this.salesColumnDefs}\r\n                            defaultColDef={this.state.defaultColDef}\r\n                            rowData={this.state.salesListToDisplay}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                    )\r\n                }\r\n                <br />\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default Drag;","import React, { Component } from 'react';\nimport { parse } from \"papaparse\";\nimport './App.css';\nimport _  from 'lodash';\n\nimport Drag from \"./draganddrop\";\n\nclass App extends Component {\n  state = {\n    sales: [],\n    countrys: []\n  }\n  \n  render() {\n  return (\n    <div>\n      <h1>EVALUATION EXERCISE </h1> <br/>\n      <h2>Drag & Drop</h2>\n      <div\n\n        onDragOver={(e) => {\n          e.preventDefault();\n        }}\n\n        onDrop={(e) => {\n          e.preventDefault();\n\n          Array.from(e.dataTransfer.files)\n          .forEach(async (file) => {\n            const text = await file.text();\n            const result = parse(text);\n            result.data.shift();\n            // remove header row and extract the data into state\n          this.setState({\n              sales: [...result.data]\n          } ,()=>{\n              // get unique list of countries from data\n              const countryList = this.state.sales.map(row => {return {name: row[1]};});\n              this.setState({ countrys :_.uniqBy(countryList, 'name')});\n            });\n          });\n        }}\n      >\n      <p>DROP HERE</p>\n      <div>\n        {\n          this.state.countrys.length > 0 &&\n          <Drag countrys={this.state.countrys} sales={(this.state.sales)}></Drag>\n        }\n      </div>\n      </div>\n    </div>\n  );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}